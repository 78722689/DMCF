#ifndef _QUEUE_H_#define _QUEUE_H_#include <list>#include "Guard.h"#include "Locker.h"#include "loger/loger_definition.h"class Queue : public IQueuePool{public:    Queue() :loger_("Queue")    {}    void put(void* param)    {        Guard<Locker> guard(lock_);        loger_ << debug << "queue::put()" ;            message_.push_back(param);    }    bool isEmpty() const {return message_.empty();}    void* takeMessage()    {            Guard<Locker> guard(lock_);        loger_ << debug  << "queue::takeMessage()" ;        void *msg = message_.front();        message_.pop_front(); // the message just be remove from list, it should be deleted after useage.        return msg;    }private:    std::list<void*> message_;    Locker lock_;    Loger loger_;};#endif // _QUEUE_H_